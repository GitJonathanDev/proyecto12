{
  "version": 3,
  "sources": ["browser-external:http", "browser-external:process", "../../@inertiajs/core/src/server.ts"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"http\" has been externalized for browser compatibility. Cannot access \"http.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"process\" has been externalized for browser compatibility. Cannot access \"process.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "import { createServer, IncomingMessage } from 'http'\nimport * as process from 'process'\nimport { InertiaAppResponse, Page } from './types'\n\ntype AppCallback = (page: Page) => InertiaAppResponse\ntype RouteHandler = (request: IncomingMessage) => Promise<unknown>\n\nconst readableToString: (readable: IncomingMessage) => Promise<string> = (readable) =>\n  new Promise((resolve, reject) => {\n    let data = ''\n    readable.on('data', (chunk) => (data += chunk))\n    readable.on('end', () => resolve(data))\n    readable.on('error', (err) => reject(err))\n  })\n\nexport default (render: AppCallback, port?: number): void => {\n  const _port = port || 13714\n\n  const routes: Record<string, RouteHandler> = {\n    '/health': async () => ({ status: 'OK', timestamp: Date.now() }),\n    '/shutdown': () => process.exit(),\n    '/render': async (request) => render(JSON.parse(await readableToString(request))),\n    '/404': async () => ({ status: 'NOT_FOUND', timestamp: Date.now() }),\n  }\n\n  createServer(async (request, response) => {\n    const dispatchRoute = routes[<string>request.url] || routes['/404']\n\n    try {\n      response.writeHead(200, { 'Content-Type': 'application/json', Server: 'Inertia.js SSR' })\n      response.write(JSON.stringify(await dispatchRoute(request)))\n    } catch (e) {\n      console.error(e)\n    }\n\n    response.end()\n  }).listen(_port, () => console.log('Inertia SSR server started.'))\n\n  console.log(`Starting SSR server on port ${_port}...`)\n}\n"],
  "mappings": ";;;;;;AAAA;AAAA;AAAA,WAAO,UAAU,OAAO,OAAO,IAAI,MAAM,CAAC,GAAG;AAAA,MAC3C,IAAI,GAAG,KAAK;AACV,YACE,QAAQ,gBACR,QAAQ,eACR,QAAQ,iBACR,QAAQ,UACR;AACA,kBAAQ,KAAK,sFAAsF,GAAG,mIAAmI;AAAA,QAC3O;AAAA,MACF;AAAA,IACF,CAAC,CAAC;AAAA;AAAA;;;ACXF;AAAA;AAAA,WAAO,UAAU,OAAO,OAAO,IAAI,MAAM,CAAC,GAAG;AAAA,MAC3C,IAAI,GAAG,KAAK;AACV,YACE,QAAQ,gBACR,QAAQ,eACR,QAAQ,iBACR,QAAQ,UACR;AACA,kBAAQ,KAAK,4FAA4F,GAAG,mIAAmI;AAAA,QACjP;AAAA,MACF;AAAA,IACF,CAAC,CAAC;AAAA;AAAA;;;ACXF,kBAA8C;AAC9C,QAAyB;AAMzB,IAAMA,IAAoEC,OACxE,IAAI,QAAQ,CAACC,GAASC,MAAW;AAC/B,MAAIC,IAAO;AACXH,IAAS,GAAG,QAASI,OAAWD,KAAQC,CAAM,GAC9CJ,EAAS,GAAG,OAAO,MAAMC,EAAQE,CAAI,CAAC,GACtCH,EAAS,GAAG,SAAUK,OAAQH,EAAOG,CAAG,CAAC;AAC3C,CAAC;AANH,IAQOC,IAAQ,CAACC,GAAqBC,MAAwB;AAC3D,MAAMC,IAAQD,KAAQ,OAEhBE,IAAuC,EAC3C,WAAW,aAAa,EAAE,QAAQ,MAAM,WAAW,KAAK,IAAI,EAAE,IAC9D,aAAa,MAAc,OAAK,GAChC,WAAW,OAAOC,MAAYJ,EAAO,KAAK,MAAM,MAAMR,EAAiBY,CAAO,CAAC,CAAC,GAChF,QAAQ,aAAa,EAAE,QAAQ,aAAa,WAAW,KAAK,IAAI,EAAE,GACpE;AAEAC,kBAAAA,cAAa,OAAOD,GAASE,MAAa;AACxC,QAAMC,IAAgBJ,EAAeC,EAAQ,GAAG,KAAKD,EAAO,MAAM;AAElE,QAAI;AACFG,QAAS,UAAU,KAAK,EAAE,gBAAgB,oBAAoB,QAAQ,iBAAiB,CAAC,GACxFA,EAAS,MAAM,KAAK,UAAU,MAAMC,EAAcH,CAAO,CAAC,CAAC;IAC7D,SAASI,GAAP;AACA,cAAQ,MAAMA,CAAC;IACjB;AAEAF,MAAS,IAAI;EACf,CAAC,EAAE,OAAOJ,GAAO,MAAM,QAAQ,IAAI,6BAA6B,CAAC,GAEjE,QAAQ,IAAI,+BAA+BA,CAAAA,KAAU;AACvD;",
  "names": ["readableToString", "readable", "resolve", "reject", "data", "chunk", "err", "server_default", "render", "port", "_port", "routes", "request", "createServer", "response", "dispatchRoute", "e"]
}
